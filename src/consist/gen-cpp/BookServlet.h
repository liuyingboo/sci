/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BookServlet_H
#define BookServlet_H

#include <thrift/TDispatchProcessor.h>
#include "rpc_types.h"

namespace example {

class BookServletIf {
 public:
  virtual ~BookServletIf() {}
  virtual bool Sender(const std::vector< ::example::Book_Info> & books) = 0;
  virtual void Send2(const std::vector< ::example::Book_Info> & books) = 0;
};

class BookServletIfFactory {
 public:
  typedef BookServletIf Handler;

  virtual ~BookServletIfFactory() {}

  virtual BookServletIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BookServletIf* /* handler */) = 0;
};

class BookServletIfSingletonFactory : virtual public BookServletIfFactory {
 public:
  BookServletIfSingletonFactory(const boost::shared_ptr<BookServletIf>& iface) : iface_(iface) {}
  virtual ~BookServletIfSingletonFactory() {}

  virtual BookServletIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BookServletIf* /* handler */) {}

 protected:
  boost::shared_ptr<BookServletIf> iface_;
};

class BookServletNull : virtual public BookServletIf {
 public:
  virtual ~BookServletNull() {}
  bool Sender(const std::vector< ::example::Book_Info> & /* books */) {
    bool _return = false;
    return _return;
  }
  void Send2(const std::vector< ::example::Book_Info> & /* books */) {
    return;
  }
};

typedef struct _BookServlet_Sender_args__isset {
  _BookServlet_Sender_args__isset() : books(false) {}
  bool books;
} _BookServlet_Sender_args__isset;

class BookServlet_Sender_args {
 public:

  BookServlet_Sender_args() {
  }

  virtual ~BookServlet_Sender_args() throw() {}

  std::vector< ::example::Book_Info>  books;

  _BookServlet_Sender_args__isset __isset;

  void __set_books(const std::vector< ::example::Book_Info> & val) {
    books = val;
  }

  bool operator == (const BookServlet_Sender_args & rhs) const
  {
    if (!(books == rhs.books))
      return false;
    return true;
  }
  bool operator != (const BookServlet_Sender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BookServlet_Sender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BookServlet_Sender_pargs {
 public:


  virtual ~BookServlet_Sender_pargs() throw() {}

  const std::vector< ::example::Book_Info> * books;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BookServlet_Sender_result__isset {
  _BookServlet_Sender_result__isset() : success(false) {}
  bool success;
} _BookServlet_Sender_result__isset;

class BookServlet_Sender_result {
 public:

  BookServlet_Sender_result() : success(0) {
  }

  virtual ~BookServlet_Sender_result() throw() {}

  bool success;

  _BookServlet_Sender_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BookServlet_Sender_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BookServlet_Sender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BookServlet_Sender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BookServlet_Sender_presult__isset {
  _BookServlet_Sender_presult__isset() : success(false) {}
  bool success;
} _BookServlet_Sender_presult__isset;

class BookServlet_Sender_presult {
 public:


  virtual ~BookServlet_Sender_presult() throw() {}

  bool* success;

  _BookServlet_Sender_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BookServlet_Send2_args__isset {
  _BookServlet_Send2_args__isset() : books(false) {}
  bool books;
} _BookServlet_Send2_args__isset;

class BookServlet_Send2_args {
 public:

  BookServlet_Send2_args() {
  }

  virtual ~BookServlet_Send2_args() throw() {}

  std::vector< ::example::Book_Info>  books;

  _BookServlet_Send2_args__isset __isset;

  void __set_books(const std::vector< ::example::Book_Info> & val) {
    books = val;
  }

  bool operator == (const BookServlet_Send2_args & rhs) const
  {
    if (!(books == rhs.books))
      return false;
    return true;
  }
  bool operator != (const BookServlet_Send2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BookServlet_Send2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BookServlet_Send2_pargs {
 public:


  virtual ~BookServlet_Send2_pargs() throw() {}

  const std::vector< ::example::Book_Info> * books;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class BookServletClient : virtual public BookServletIf {
 public:
  BookServletClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BookServletClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Sender(const std::vector< ::example::Book_Info> & books);
  void send_Sender(const std::vector< ::example::Book_Info> & books);
  bool recv_Sender();
  void Send2(const std::vector< ::example::Book_Info> & books);
  void send_Send2(const std::vector< ::example::Book_Info> & books);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BookServletProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BookServletIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BookServletProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Sender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Send2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BookServletProcessor(boost::shared_ptr<BookServletIf> iface) :
    iface_(iface) {
    processMap_["Sender"] = &BookServletProcessor::process_Sender;
    processMap_["Send2"] = &BookServletProcessor::process_Send2;
  }

  virtual ~BookServletProcessor() {}
};

class BookServletProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BookServletProcessorFactory(const ::boost::shared_ptr< BookServletIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BookServletIfFactory > handlerFactory_;
};

class BookServletMultiface : virtual public BookServletIf {
 public:
  BookServletMultiface(std::vector<boost::shared_ptr<BookServletIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BookServletMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BookServletIf> > ifaces_;
  BookServletMultiface() {}
  void add(boost::shared_ptr<BookServletIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Sender(const std::vector< ::example::Book_Info> & books) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Sender(books);
    }
    return ifaces_[i]->Sender(books);
  }

  void Send2(const std::vector< ::example::Book_Info> & books) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Send2(books);
    }
    ifaces_[i]->Send2(books);
  }

};

} // namespace

#endif
